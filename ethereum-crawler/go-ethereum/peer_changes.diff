diff --git a/cmd/geth/main.go b/cmd/geth/main.go
index dab2d8f..74a618e 100644
--- a/cmd/geth/main.go
+++ b/cmd/geth/main.go
@@ -560,6 +560,7 @@ func blockRecovery(ctx *cli.Context) {
 }
 
 func startEth(ctx *cli.Context, eth *eth.Ethereum) {
+	
 	// Start Ethereum itself
 	utils.StartEthereum(eth)
 
diff --git a/core/block_validator.go b/core/block_validator.go
index 73c33d8..33727e5 100644
--- a/core/block_validator.go
+++ b/core/block_validator.go
@@ -252,6 +252,10 @@ func ValidateHeader(pow pow.PoW, header *types.Header, parent *types.Header, che
 // the difficulty that a new block should have when created at time
 // given the parent block's time and difficulty.
 func CalcDifficulty(time, parentTime uint64, parentNumber, parentDiff *big.Int) *big.Int {
+	//x := big.NewInt(100000)
+	
+	//return x;
+	
 	if params.IsHomestead(new(big.Int).Add(parentNumber, common.Big1)) {
 		return calcDifficultyHomestead(time, parentTime, parentNumber, parentDiff)
 	} else {
diff --git a/core/state_processor.go b/core/state_processor.go
index b9793b1..f8213d0 100644
--- a/core/state_processor.go
+++ b/core/state_processor.go
@@ -2,6 +2,10 @@ package core
 
 import (
 	"math/big"
+	"fmt"
+	"time"
+
+	"github.com/ethereum/go-ethereum/common"
 
 	"github.com/ethereum/go-ethereum/core/state"
 	"github.com/ethereum/go-ethereum/core/types"
@@ -9,11 +13,17 @@ import (
 	"github.com/ethereum/go-ethereum/crypto"
 	"github.com/ethereum/go-ethereum/logger"
 	"github.com/ethereum/go-ethereum/logger/glog"
+		
+	"database/sql"
+    _ "github.com/Go-SQL-Driver/MySQL"
+    "os"
+    "bytes"
 )
 
 var (
 	big8  = big.NewInt(8)
 	big32 = big.NewInt(32)
+	seenBlocks map[string]bool = make(map[string]bool)
 )
 
 type StateProcessor struct {
@@ -24,6 +34,15 @@ func NewStateProcessor(bc *BlockChain) *StateProcessor {
 	return &StateProcessor{bc}
 }
 
+var mysqldb *sql.DB = nil
+
+const (
+    DB_HOST = "tcp(127.0.0.1:3306)"
+    DB_NAME = "ethereum"
+    DB_USER = "root"
+    DB_PASS = "mysql"
+)
+
 // Process processes the state changes according to the Ethereum rules by running
 // the transaction messages using the statedb and applying any rewards to both
 // the processor (coinbase) and any included uncles.
@@ -39,17 +58,212 @@ func (p *StateProcessor) Process(block *types.Block, statedb *state.StateDB) (ty
 		header       = block.Header()
 		allLogs      vm.Logs
 		gp           = new(GasPool).AddGas(block.GasLimit())
+		sqlScripts  []string
 	)
 
+	storeToDB := true
+	storeToFile := false
+
+	blockProcessed := fmt.Sprintf("Processing block #%s", block.Number())
+	
+	if block.Number().Cmp(big.NewInt(1187780)) < 0 { //1187780
+		storeToDB = false
+		blockProcessed = fmt.Sprintf("Processing block #%s : skipping db part", block.Number())
+	}
+	
+	fmt.Println(blockProcessed)
+	
+	if mysqldb == nil {
+		dsn := DB_USER + ":" + DB_PASS + "@" + DB_HOST + "/" + DB_NAME + "?charset=utf8"
+	    mysqldb, _ = sql.Open("mysql", dsn)
+    }
+
+	//blockDelSql := fmt.Sprintf("DELETE FROM blocks WHERE block_number=%s;\n", block.Number())
+	//sqlScripts = append(sqlScripts, blockDelSql)
+	
+	//transactionsDelSql := fmt.Sprintf("DELETE FROM blocks_transactions WHERE block_number=%s;\n", block.Number().String())
+	//sqlScripts = append(sqlScripts, transactionsDelSql)
+	
+	//unclesDelSql := fmt.Sprintf("DELETE FROM blocks_uncles WHERE block_number=%s;\n", block.Number().String())
+	//sqlScripts = append(sqlScripts, unclesDelSql)
+	
+	blockHash := block.Hash().Hex()
+	
+	if _, ok := seenBlocks[blockHash]; ok {
+		storeToDB = false
+		storeToFile = false
+		fmt.Println("duplicate block received!")
+	} else {
+		seenBlocks[blockHash] = true
+	}
+	 
+	blockInsSql := fmt.Sprintf("INSERT INTO blocks(block_number, processed_time, hash, parentHash,	nonce,sha3Uncles,transactionsRoot,stateRoot,receiptRoot,miner,difficulty,size,gasLimit, gasUsed, timestamp) VALUE(%s, FROM_UNIXTIME(%d), '%s', '%s', %d, '%s', '%s', '%s', '%s', '%s', %d, %d, %d, %d, %d);\n", 
+		block.Number().String(), //block_number
+		time.Now().Unix(),  //processed_time
+		blockHash,  //hash
+		block.ParentHash().Hex(),  //parentHash
+		block.Nonce(),  //nonce
+		block.UncleHash().Hex(), //sha3Uncles
+		block.TxHash().Hex(), //transactionsRoot
+		block.Root().Hex(), //stateRoot
+		block.ReceiptHash().Hex(), //receiptRoot
+		block.Coinbase().Hex(), //miner
+		block.Difficulty().Uint64(), //difficulty
+		block.Size().Int64(), //size
+		block.GasLimit().Uint64(), //gasLimit
+		block.GasUsed().Uint64(), //gasUsed
+		block.Time().Uint64()) // timestamp
+	
+	sqlScripts = append(sqlScripts, blockInsSql)
+	
+	for _, uncle := range block.Uncles() {
+		unclesInsSql := fmt.Sprintf("INSERT INTO blocks_uncles(block_number, hash, uncle) VALUES(%s, '%s', '%s');\n", block.Number().String(), blockHash, uncle.Hash().Hex())
+		
+		sqlScripts = append(sqlScripts, unclesInsSql)
+	}
+	
+	var transactionInsSqlBuffer bytes.Buffer
+	var internalTransactionInsSqlBuffer bytes.Buffer
+	//var internalTransactionDelSqlBuffer bytes.Buffer
+	
+	firstInternal := true
+	firstTransaction := true
+	
+	transactionInsSqlBuffer.WriteString(fmt.Sprintf("INSERT INTO blocks_transactions(`block_number`,`blockHash`,`transactionIndex`,`hash`,`nonce`,`from`,`to`,`value`,`gas`,`gasPrice`,`input`,`contractAddress`,`cumulativeGasUsed`,`gasUsed`) VALUES"))
+	internalTransactionInsSqlBuffer.WriteString(fmt.Sprintf("INSERT INTO block_transactions_internals(`block_number`,`blockHash`, hash, depth, eventType, `from`, `to`, amount) VALUES"))
+	//internalTransactionDelSqlBuffer.WriteString(fmt.Sprintf("DELETE FROM block_transactions_internals WHERE hash in("))
+	
 	for i, tx := range block.Transactions() {
 		statedb.StartRecord(tx.Hash(), block.Hash(), i)
-		receipt, logs, _, err := ApplyTransaction(p.bc, gp, statedb, header, tx, totalUsedGas)
+		internals, receipt, logs, _, err := ApplyTransaction(p.bc, gp, statedb, header, tx, totalUsedGas)
 		if err != nil {
 			return nil, nil, totalUsedGas, err
 		}
+		
+		//if storeToDB {
+			fromAddress, _ := tx.From()
+			toAddress := tx.To()
+			
+			toAddressStr := "0x0000000000000000000000000000000000000000"
+			
+			if toAddress != nil {
+				toAddressStr = toAddress.Hex()
+			}
+			if !firstTransaction {
+				transactionInsSqlBuffer.WriteString("\n,")
+				//internalTransactionDelSqlBuffer.WriteString("\n,")
+			}
+			firstTransaction = false
+			
+			transactionInsSqlBuffer.WriteString(fmt.Sprintf("(%s, '%s', %d, '%s', %d, '%s', '%s', %s, %s, %s, '0x%s', '%s', %s, %s)", 
+				block.Number().String(),
+				blockHash,
+				i,
+				tx.Hash().Hex(),
+				tx.Nonce(),
+				fromAddress.Hex(),
+				toAddressStr,
+				tx.Value().String(),
+				tx.Gas().String(),
+				tx.GasPrice().String(),
+				common.Bytes2Hex(tx.Data()),
+				receipt.ContractAddress.Hex(),
+				receipt.GasUsed.String(),
+				receipt.CumulativeGasUsed.String()))
+			
+			/*
+			_, err = mysqldb.Exec(transactionInsSql)
+			if err != nil {
+		        fmt.Println(err)
+		    }*/
+	
+			//internalTransactionDelSqlBuffer.WriteString(fmt.Sprintf("'%s'", tx.Hash().Hex()))
+			
+//			delSql := fmt.Sprintf("DELETE FROM block_transactions_internals WHERE hash='%s';\n", tx.Hash().Hex())
+//			sqlScripts = append(sqlScripts, delSql)
+			
+			//fmt.Println(delSql)
+		/*
+			_, err = mysqldb.Exec(delSql)
+			if err != nil {
+		        fmt.Println(err)
+		    }*/
+			
+			for _, intern := range internals {
+				//fmt.Println(intern.EventType)
+				//fmt.Println(intern.Depth, "txHash =", tx.Hash().Hex() , ", ", intern.EventType )
+				
+				if !firstInternal {
+					internalTransactionInsSqlBuffer.WriteString("\n,")
+				}
+				
+				firstInternal = false
+				internalTransactionInsSqlBuffer.WriteString( fmt.Sprintf("(%s, '%s', '%s', %d, '%s', '%s', '%s', %s)",
+					block.Number().String(), blockHash, tx.Hash().Hex(), intern.Depth, intern.EventType, intern.From.Hex(), intern.To.Hex(), intern.Amount.String()))
+				
+				//sqlScripts = append(sqlScripts, sql)
+				/*
+				_, err = mysqldb.Exec(sql)
+				if err != nil {
+			        fmt.Println(err)
+			    }*/
+				
+				//fmt.Println(sql)
+				
+			}
+		//}
+		
 		receipts = append(receipts, receipt)
 		allLogs = append(allLogs, logs...)
 	}
+	if !firstTransaction {
+		transactionInsSqlBuffer.WriteString(";\n")
+		sqlScripts = append(sqlScripts, transactionInsSqlBuffer.String())
+		
+		//internalTransactionDelSqlBuffer.WriteString(");\n")
+		//sqlScripts = append(sqlScripts, internalTransactionDelSqlBuffer.String())
+		
+	}
+	
+	if !firstInternal {
+		internalTransactionInsSqlBuffer.WriteString(";\n")
+		sqlScripts = append(sqlScripts, internalTransactionInsSqlBuffer.String())
+	}
+	
+			
+	if storeToFile {
+		f, err := os.OpenFile("sql_log.txt", os.O_APPEND|os.O_CREATE, 0600)
+		if err != nil {
+			fmt.Println(err)
+		    panic(err)
+		}
+		
+		defer f.Close()
+		
+		for _, script := range sqlScripts {
+			if _, err = f.WriteString(script); err != nil {
+				fmt.Println(err)
+			    panic(err)
+			}
+			
+		}
+	}
+	
+	if storeToDB {
+		
+		for _, script := range sqlScripts {
+			
+			_, err = mysqldb.Exec(script)
+			
+			if err != nil {
+				fmt.Println(script)
+		        fmt.Println(err)
+		        panic(err)
+		    }
+			
+		}
+	}
+	
 	AccumulateRewards(statedb, header, block.Uncles())
 
 	return receipts, allLogs, totalUsedGas, err
@@ -60,10 +274,11 @@ func (p *StateProcessor) Process(block *types.Block, statedb *state.StateDB) (ty
 //
 // ApplyTransactions returns the generated receipts and vm logs during the
 // execution of the state transition phase.
-func ApplyTransaction(bc *BlockChain, gp *GasPool, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *big.Int) (*types.Receipt, vm.Logs, *big.Int, error) {
-	_, gas, err := ApplyMessage(NewEnv(statedb, bc, tx, header), tx, gp)
+func ApplyTransaction(bc *BlockChain, gp *GasPool, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *big.Int) ([]vm.Internal, *types.Receipt, vm.Logs, *big.Int, error) {
+	env := NewEnv(statedb, bc, tx, header)
+	_, gas, err := ApplyMessage(env, tx, gp)
 	if err != nil {
-		return nil, nil, nil, err
+		return nil, nil, nil, nil, err
 	}
 
 	// Update the state with pending changes
@@ -82,7 +297,7 @@ func ApplyTransaction(bc *BlockChain, gp *GasPool, statedb *state.StateDB, heade
 
 	glog.V(logger.Debug).Infoln(receipt)
 
-	return receipt, logs, gas, err
+	return env.GetInternals(), receipt, logs, gas, err
 }
 
 // AccumulateRewards credits the coinbase of the given block with the
diff --git a/core/tx_pool.go b/core/tx_pool.go
index c3d088c..dd2b433 100644
--- a/core/tx_pool.go
+++ b/core/tx_pool.go
@@ -22,7 +22,9 @@ import (
 	"math/big"
 	"sort"
 	"sync"
-
+	"time"
+	"os"
+	
 	"github.com/ethereum/go-ethereum/common"
 	"github.com/ethereum/go-ethereum/core/state"
 	"github.com/ethereum/go-ethereum/core/types"
@@ -30,6 +32,10 @@ import (
 	"github.com/ethereum/go-ethereum/logger"
 	"github.com/ethereum/go-ethereum/logger/glog"
 	"github.com/ethereum/go-ethereum/params"
+	"github.com/ethereum/go-ethereum/p2p"
+	
+	"database/sql"
+    _ "github.com/Go-SQL-Driver/MySQL"
 )
 
 var (
@@ -51,6 +57,12 @@ const (
 
 type stateFn func() (*state.StateDB, error)
 
+type Announcement struct {
+	ts			time.Time
+	source		*p2p.Peer
+	sourceIP	string
+}
+
 // TxPool contains all currently known transactions. Transactions
 // enter the pool when they are received from the network or submitted
 // locally. They exit the pool when they are included in the blockchain.
@@ -70,6 +82,9 @@ type TxPool struct {
 	pending      map[common.Hash]*types.Transaction // processable transactions
 	queue        map[common.Address]map[common.Hash]*types.Transaction
 
+	txAnnouncements map[common.Hash]Announcement
+	seenPeers map[string]bool
+	
 	homestead bool
 }
 
@@ -78,6 +93,8 @@ func NewTxPool(eventMux *event.TypeMux, currentStateFn stateFn, gasLimitFn func(
 		pending:      make(map[common.Hash]*types.Transaction),
 		queue:        make(map[common.Address]map[common.Hash]*types.Transaction),
 		quit:         make(chan bool),
+		txAnnouncements: make(map[common.Hash]Announcement),
+		seenPeers:    make(map[string]bool),
 		eventMux:     eventMux,
 		currentState: currentStateFn,
 		gasLimit:     gasLimitFn,
@@ -110,7 +127,8 @@ func (pool *TxPool) eventLoop() {
 			pool.minGasPrice = ev.Price
 			pool.mu.Unlock()
 		case RemovedTransactionEvent:
-			pool.AddTransactions(ev.Txs)
+			ts := time.Now();
+			pool.AddTransactions(ev.Txs, ts, nil)
 		}
 	}
 }
@@ -231,9 +249,71 @@ func (pool *TxPool) validateTx(tx *types.Transaction) error {
 }
 
 // validate and queue transactions.
-func (self *TxPool) add(tx *types.Transaction) error {
+func (self *TxPool) add(tx *types.Transaction, t time.Time, p *p2p.Peer) error {
 	hash := tx.Hash()
 
+	storeToDB := true
+	storeToFile := false
+		
+	peerIP := ""
+	if p != nil {
+		peerIP = p.Info().Network.RemoteAddress
+	}
+	
+	if storeToDB {
+		if mysqldb == nil {
+			dsn := DB_USER + ":" + DB_PASS + "@" + DB_HOST + "/" + DB_NAME + "?charset=utf8"
+		    mysqldb, _ = sql.Open("mysql", dsn)
+	    }
+	}
+	
+	if peerIP != "" {
+		
+		var sqlScripts  []string
+	
+		sqlScript := fmt.Sprintf("INSERT INTO ethereum_peers(peer_ip, first_seen_ts, last_seen_ts) VALUES('%s', now(), now()) ON DUPLICATE KEY UPDATE last_seen_ts=now();\n",
+			peerIP);
+		
+		sqlScripts = append(sqlScripts, sqlScript)
+		
+		if _, ok := self.seenPeers[peerIP]; !ok {
+			
+			self.seenPeers[peerIP] = true
+			
+			if storeToFile {
+				f, err := os.OpenFile("seenPeers.csv", os.O_APPEND|os.O_CREATE, 0600)
+				if err != nil {
+					fmt.Println(err)
+				    panic(err)
+				}
+				
+				defer f.Close()
+				
+				peerInfo := peerIP + "\n"
+				
+				if _, err = f.WriteString(peerInfo); err != nil {
+					fmt.Println(err)
+				    panic(err)
+				}
+			}
+							
+		}
+		
+		if storeToDB {
+		
+			for _, script := range sqlScripts {
+				
+				_, err := mysqldb.Exec(script)
+				
+				if err != nil {
+			        fmt.Println(err)
+			        panic(err)
+			    }
+				
+			}
+		}
+	}
+	
 	if self.pending[hash] != nil {
 		return fmt.Errorf("Known transaction (%x)", hash[:4])
 	}
@@ -241,6 +321,71 @@ func (self *TxPool) add(tx *types.Transaction) error {
 	if err != nil {
 		return err
 	}
+	//once it's validated -> remember it
+	if _, ok := self.txAnnouncements[hash]; !ok {
+		
+		log := fmt.Sprintf("%s,%d,%s,%s\n",
+			t.String(),
+			t.Unix(),
+			hash.Hex(),
+			peerIP)
+		
+		//"Incoming tx: ", hash.Hex(), " from ",  p.Info().Network.RemoteAddress, "  received at ", t.Unix(), " (", t.String() ,")");
+	
+		fmt.Print(log)
+		
+		var sqlScripts  []string
+		
+		if mysqldb == nil {
+			dsn := DB_USER + ":" + DB_PASS + "@" + DB_HOST + "/" + DB_NAME + "?charset=utf8"
+		    mysqldb, _ = sql.Open("mysql", dsn)
+	    }
+		
+		sqlScript := fmt.Sprintf("INSERT ethereum_tx_announcements(tx_hash, peer_from, received_at, rcv) VALUES('%s', '%s', from_unixtime(%d), 1) ON DUPLICATE KEY UPDATE rcv=rcv+1",
+			hash.Hex(),
+			p.Info().Network.RemoteAddress,
+			t.Unix())
+		
+		sqlScripts = append(sqlScripts, sqlScript)
+		
+		if storeToFile {
+			f, err := os.OpenFile("txs_heard.csv", os.O_APPEND|os.O_CREATE, 0600)
+			if err != nil {
+				fmt.Println(err)
+			    panic(err)
+			}
+			
+			defer f.Close()
+			
+			if _, err = f.WriteString(log); err != nil {
+				fmt.Println(err)
+			    panic(err)
+			}
+		}
+		
+		if storeToDB {
+		
+			for _, script := range sqlScripts {
+				
+				_, err := mysqldb.Exec(script)
+				
+				if err != nil {
+			        fmt.Println(err)
+			        panic(err)
+			    }
+				
+			}
+		}
+		
+		self.txAnnouncements[hash] = Announcement{
+			ts: t,
+			source: p,
+			sourceIP: peerIP,
+		}
+		
+	}
+	
+	//
 	self.queueTx(hash, tx)
 
 	if glog.V(logger.Debug) {
@@ -290,11 +435,12 @@ func (pool *TxPool) addTx(hash common.Hash, addr common.Address, tx *types.Trans
 }
 
 // Add queues a single transaction in the pool if it is valid.
-func (self *TxPool) Add(tx *types.Transaction) error {
+func (self *TxPool) Add(tx *types.Transaction, ts time.Time, p *p2p.Peer) error {
 	self.mu.Lock()
 	defer self.mu.Unlock()
 
-	if err := self.add(tx); err != nil {
+
+	if err := self.add(tx, ts, p); err != nil {
 		return err
 	}
 	self.checkQueue()
@@ -302,12 +448,15 @@ func (self *TxPool) Add(tx *types.Transaction) error {
 }
 
 // AddTransactions attempts to queue all valid transactions in txs.
-func (self *TxPool) AddTransactions(txs []*types.Transaction) {
+func (self *TxPool) AddTransactions(txs []*types.Transaction, ts time.Time, p *p2p.Peer) {
+	
 	self.mu.Lock()
 	defer self.mu.Unlock()
 
+	
 	for _, tx := range txs {
-		if err := self.add(tx); err != nil {
+		
+		if err := self.add(tx, ts, p); err != nil {
 			glog.V(logger.Debug).Infoln("tx error:", err)
 		} else {
 			h := tx.Hash()
diff --git a/core/vm/environment.go b/core/vm/environment.go
index a58e3ba..4bfbd44 100644
--- a/core/vm/environment.go
+++ b/core/vm/environment.go
@@ -59,6 +59,10 @@ type Environment interface {
 	// Returns all coalesced structured logs
 	StructLogs() []StructLog
 
+
+	GetInternals() []Internal
+	AddInternal(Internal)
+	
 	// Type of the VM
 	VmType() Type
 
@@ -114,6 +118,14 @@ type StructLog struct {
 	Err     error
 }
 
+type Internal struct {
+	EventType	string
+	Depth		int
+	From		common.Address
+	To			common.Address
+	Amount		*big.Int
+}
+
 type Account interface {
 	SubBalance(amount *big.Int)
 	AddBalance(amount *big.Int)
diff --git a/core/vm/vm.go b/core/vm/vm.go
index 4b502e3..298e142 100644
--- a/core/vm/vm.go
+++ b/core/vm/vm.go
@@ -57,6 +57,13 @@ func (self *Vm) Run(contract *Contract, input []byte) (ret []byte, err error) {
 		return nil, nil
 	}
 
+	self.env.AddInternal(Internal {
+				"invocation",
+				self.env.Depth(),
+				contract.Address(),
+				contract.Address(),
+				big.NewInt(0) })
+	
 	var (
 		codehash = crypto.Sha3Hash(contract.Code) // codehash is used when doing jump dest caching
 		program  *Program
diff --git a/core/vm_env.go b/core/vm_env.go
index 430d369..47d0e22 100644
--- a/core/vm_env.go
+++ b/core/vm_env.go
@@ -34,6 +34,9 @@ type VMEnv struct {
 	typ    vm.Type
 	// structured logging
 	logs []vm.StructLog
+	
+	//
+	internals []vm.Internal
 }
 
 func NewEnv(state *state.StateDB, chain *BlockChain, msg Message, header *types.Header) *VMEnv {
@@ -109,3 +112,11 @@ func (self *VMEnv) StructLogs() []vm.StructLog {
 func (self *VMEnv) AddStructLog(log vm.StructLog) {
 	self.logs = append(self.logs, log)
 }
+
+func (self *VMEnv) GetInternals() []vm.Internal {
+	return self.internals
+}
+
+func (self *VMEnv) AddInternal(intern vm.Internal) {
+	self.internals = append(self.internals, intern)
+}
diff --git a/eth/handler.go b/eth/handler.go
index 96bb554..7fa4381 100644
--- a/eth/handler.go
+++ b/eth/handler.go
@@ -661,19 +661,15 @@ func (pm *ProtocolManager) handleMsg(p *peer) error {
 		}
 
 	case msg.Code == TxMsg:
+		ts := time.Now()
+		
 		// Transactions arrived, parse all of them and deliver to the pool
 		var txs []*types.Transaction
 		if err := msg.Decode(&txs); err != nil {
 			return errResp(ErrDecode, "msg %v: %v", msg, err)
 		}
-		for i, tx := range txs {
-			// Validate and mark the remote transaction
-			if tx == nil {
-				return errResp(ErrDecode, "transaction %d is nil", i)
-			}
-			p.MarkTransaction(tx.Hash())
-		}
-		pm.txpool.AddTransactions(txs)
+		
+		pm.txpool.AddTransactions(txs, ts, p.Peer)
 
 	default:
 		return errResp(ErrInvalidMsgCode, "%v", msg.Code)
diff --git a/eth/protocol.go b/eth/protocol.go
index 808ac06..1b5216d 100644
--- a/eth/protocol.go
+++ b/eth/protocol.go
@@ -20,10 +20,12 @@ import (
 	"fmt"
 	"io"
 	"math/big"
-
+	"time"
+	
 	"github.com/ethereum/go-ethereum/common"
 	"github.com/ethereum/go-ethereum/core/types"
 	"github.com/ethereum/go-ethereum/rlp"
+	"github.com/ethereum/go-ethereum/p2p"
 )
 
 // Constants to match up protocol versions and messages
@@ -110,7 +112,7 @@ var errorToString = map[int]string{
 
 type txPool interface {
 	// AddTransactions should add the given transactions to the pool.
-	AddTransactions([]*types.Transaction)
+	AddTransactions([]*types.Transaction, time.Time, *p2p.Peer)
 
 	// GetTransactions should return pending transactions.
 	// The slice should be modifiable by the caller.
diff --git a/miner/worker.go b/miner/worker.go
index 30f4ff4..1f45694 100644
--- a/miner/worker.go
+++ b/miner/worker.go
@@ -649,7 +649,7 @@ func (env *Work) commitTransactions(transactions types.Transactions, gasPrice *b
 
 func (env *Work) commitTransaction(tx *types.Transaction, bc *core.BlockChain, gp *core.GasPool) error {
 	snap := env.state.Copy()
-	receipt, _, _, err := core.ApplyTransaction(bc, gp, env.state, env.header, tx, env.header.GasUsed)
+	_, receipt, _, _, err := core.ApplyTransaction(bc, gp, env.state, env.header, tx, env.header.GasUsed)
 	if err != nil {
 		env.state.Set(snap)
 		return err
diff --git a/tests/util.go b/tests/util.go
index 8196d7f..bced392 100644
--- a/tests/util.go
+++ b/tests/util.go
@@ -142,6 +142,9 @@ type Env struct {
 
 	logs []vm.StructLog
 
+	//
+	internals []vm.Internal
+
 	vmTest bool
 }
 
@@ -159,6 +162,14 @@ func (self *Env) AddStructLog(log vm.StructLog) {
 	self.logs = append(self.logs, log)
 }
 
+func (self *Env) GetInternals() []vm.Internal {
+	return self.internals
+}
+
+func (self *Env) AddInternal(intern vm.Internal) {
+	self.internals = append(self.internals, intern)
+}
+
 func NewEnvFromMap(state *state.StateDB, envValues map[string]string, exeValues map[string]string) *Env {
 	env := NewEnv(state)
 
diff --git a/xeth/xeth.go b/xeth/xeth.go
index e5513d7..1b0e657 100644
--- a/xeth/xeth.go
+++ b/xeth/xeth.go
@@ -768,6 +768,7 @@ func (self *XEth) FromNumber(str string) string {
 }
 
 func (self *XEth) PushTx(encodedTx string) (string, error) {
+	ts := time.Now()
 	tx := new(types.Transaction)
 	err := rlp.DecodeBytes(common.FromHex(encodedTx), tx)
 	if err != nil {
@@ -775,7 +776,7 @@ func (self *XEth) PushTx(encodedTx string) (string, error) {
 		return "", err
 	}
 
-	err = self.backend.TxPool().Add(tx)
+	err = self.backend.TxPool().Add(tx, ts, nil)
 	if err != nil {
 		return "", err
 	}
@@ -934,7 +935,8 @@ func (self *XEth) SignTransaction(fromStr, toStr, nonceStr, valueStr, gasStr, ga
 }
 
 func (self *XEth) Transact(fromStr, toStr, nonceStr, valueStr, gasStr, gasPriceStr, codeStr string) (string, error) {
-
+	ts := time.Now()
+	
 	// this minimalistic recoding is enough (works for natspec.js)
 	var jsontx = fmt.Sprintf(`{"params":[{"to":"%s","data": "%s"}]}`, toStr, codeStr)
 	if !self.ConfirmTransaction(jsontx) {
@@ -1017,7 +1019,7 @@ func (self *XEth) Transact(fromStr, toStr, nonceStr, valueStr, gasStr, gasPriceS
 	if err != nil {
 		return "", err
 	}
-	if err = self.backend.TxPool().Add(signed); err != nil {
+	if err = self.backend.TxPool().Add(signed, ts, nil); err != nil {
 		return "", err
 	}
 
